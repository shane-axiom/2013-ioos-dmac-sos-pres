<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">

        <title>52n IOOS SOS Status - 2013 IOOS DMAC</title>

        <meta name="description" content="Update on 52n IOOS SOS Stauts for the 2013 IOOS DMAC Meeting">

        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <link rel="stylesheet" href="bower_components/reveal.js/css/reveal.min.css">
        <link rel="stylesheet" href="bower_components/reveal.js/css/theme/default.css" id="theme">

        <!-- For syntax highlighting -->
        <link rel="stylesheet" href="bower_components/reveal.js/lib/css/zenburn.css">

        <!-- If the query includes 'print-pdf', use the PDF print sheet -->
        <script>
            document.write( '<link rel="stylesheet" href="bower_components/reveal.js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
        </script>

        <!--[if lt IE 9]>
        <script src="bower_components/reveal.js/lib/js/html5shiv.js"></script>
        <![endif]-->
        
        <link rel="stylesheet" href="pres.css">
    </head>

    <body>
        <div class="reveal">
            <div class="slides">
                <section>
                    <h1>52n IOOS SOS</h1>
                    <h3>Status Update</h3>
                    <p>
                        <small>
                            For IOOS DMAC Fall 2013<br />
                            <a href="mailto:shane@axiomalaska.com">Shane StClair</a>, Axiom Alaska</a>
                        </small>
                    </p>
                </section>
                
                <section>
                    <h1>What is SOS?</h1>
                    <h3>Sensor Observation Service</h3>
                    <ul>
                        <li>Store and serve sensor observations and metadata</li>
                        <li>Open Geospatial Consortium (OGC) Standard</li>
                    </ul>
                </section>

                <section>
                    <h1>52&deg;North SOS</h1>
                    <h3>Overview</h3>
                    <ul>
                        <li>Open source Java SOS implementation</li>
                        <li>OGC SOS reference implementation</li>
                        <li>Active development by 52n, other contributors</li>
                        <li>Working toward SOS 4.0 release (currently beta3-SNAPSHOT)</li>
                    </ul>
                </section>

                <section>
                    <h1>52&deg;North SOS</h1>
                    <h3>Dependencies</h3>
                    <ul>
                        <li>Maven</li>
                        <li>Hibernate</li>
                        <li>xmlbeans</li>
                        <li>JTS</li>
                        <li>Joda-Time</li>
                    </ul>
                </section>

                <section>
                    <h1>52&deg;North SOS</h1>
                    <h3>Requirements</h3>
                    <ul>
                        <li>Java 1.6+</li>
                        <li>Applicaton container (Tomcat, Glassfish, etc)</li>
                        <li>Database (PostgreSQL/PostGIS, Oracle, H2)</li>
                        <li>Decent hardware (memory/processor/disks)</li>
                    </ul>
                </section>
                
                <section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h2>Features</h2>
                    </section>                
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Admin tools</h3>
                        <ul>
                            <li>Install wizard</li>
                            <li>Admin interface</li>
                            <li>Test client - static test data example requests</li>
                            <li>Configuration import/export</li>
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Database Support</h3>
                        <ul>
                            <li>PostgreSQL/PostGIS</li>
                            <li>Oracle</li>
                            <li>H2 (file)</li>
                            <li>H2 (memory)</li>
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Dynamic cache</h3>
                        <ul>
                            <li>Speeds up requests, especially for large databases</li>
                            <li>Updated during transactional requests</li>
                            <li>Serialized to file, preserved over restarts</li>                            
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Pluggable decoders/encoders</h3>
                        <ul>
                            <li>Easy to add new custom formats
                                <ul>
                                    <li>CSV</li>
                                    <li>IOOS m2.0</li>
                                </ul>
                            </li>
                            <li>Support many formats simultaneously</li>
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Filtering</h3>
                        <div class="flexbox">
                            <ul>
                                <li>Spatial
                                    <ul>
                                        <li>Overlaps</li>
                                        <li>Intersects</li>
                                        <li>Contains</li>
                                        <li>BBOX</li>
                                    </ul>
                                </li>
                            </ul>
                            <ul>
                                <li>Temporal
                                    <ul>
                                        <li>before</li>
                                        <li>after</li>
                                        <li>during</li>
                                        <li>Etc</li>
                                    </ul>
                                </li>
                            </ul>
                            <ul>
                                <li>Scalar
                                    <ul>
                                        <li>equal</li>
                                        <li>lessThan</li>
                                        <li>greaterThan</li>
                                        <li>Etc</li>
                                    </ul>
                                </li>
                            </ul>                            
                        </div>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Robust SOS 2.0 support</h3>
                        <ul>
                            <li>InsertSensor</li>
                            <li>InsertObservation</li>
                            <li>GetDataAvailability</li>
                            <li>UpdateSensorDescription</li>
                            <li>Result handling</li>
                            <li>Spatial filtering profile</li>
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Bindings</h3>
                        <ul>
                            <li>KVP (GET, key value pair)</li>
                            <li>POX (POST, plain old XML)</li>
                            <li>SOAP (POST, SOAP XML)</li>
                            <li>REST</li>
                            <li>JSON</li>
                        </ul>
                    </section>
                    <section>
                        <h1>52&deg;North SOS</h1>
                        <h3>Advanced</h3>
                        <ul>
                            <li>Test data insertion</li>
                            <li>Split data array during InsertObservation</li>
                            <li>Spatial filtering profile</li>
                            <li>Related features</li>
                        </ul>
                    </section>
                </section>

                <section>
                    <section>
                        <h1>52n IOOS SOS</h1>
                        <h2>Architecture</h2>
                        <ul>
                            <li>Build on upstream 52n SOS modules</li>
                            <li>Add IOOS customizations
                                <ul>
                                    <li>Encoders/Decoders</li>
                                    <li>IOOS flavor test data</li>
                                    <li>Custom default settings</li>
                                </ul>
                            </li>
                        </ul>
                    </section>
                    <section>
                        <h1>52n IOOS SOS</h1>
                        <h2>Status</h2>
                        <ul>
                            <li>m1.0 template implementation complete
                                <ul>
                                  <li>point</li>
                                  <li>timeSeries</li>
                                  <li>timeSeriesProfile</li>
                                </ul>
                            </li>
                            <li>Insert and remove IOOS test data through admin interace</li>
                            <li>IOOS flavor example requests in test client</li>
                        </ul>
                    </section>                    
                </section>

                <section>
                    <section>
                        <h1>Software Components</h1>
                        <ul>
                            <li>Open source</li>
                            <li>Hosted on GitHub</li>
                            <li>Reusable</li>
                            <li>Collaborative</li>
                        </ul>
                    </section>
                    
                    <section>
                        <h4>Project Interdependencies</h4>
                        <canvas id="dep_graph_canvas" width="900" height="700" />
                    </section>

                    <section>
                        <h1><a href="https://github.com/axiomalaska/cf4j" target="_blank">cf4j</a></h1>
                        <ul>
                            <li>Generated cf standard names constants for Java</li>
                            <li>Version matches CF standard name version</li>
                        </ul>
                        <pre><code data-trim contenteditable>                        
LOGGER.info(CFStandardNames.AIR_PRESSURE.getName() + ' has units ' + 
    CFStandardNames.AIR_PRESSURE.getCanonicalUnits());
                        </code></pre>
                    </section>

                    <section>
                        <h1><a href="https://github.com/axiomalaska/phenomena" target="_blank">phenomena</a></h1>
                        <ul>
                            <li>Standardized phenomenon/observed property library</li>
                            <li>Multiple sources
                                <ul>
                                    <li>CF standard names</li>
                                    <li>IOOS MMI parameters</li>
                                    <li>Fake (limbo until added to IOOS MMI or CF)</li>
                                </ul>
                            </li>
                        </ul>
                        <pre><code data-trim contenteditable>
Unit farenheitUnit = UnitResolver.instance().resolveUnit("degF");
int farenheitValue = Phenomena.instance().AIR_TEMPERATURE.getUnit()
    .convertTo(16.5, farenheitUnit);
                        </code></pre>
                    </section>

                    <section>
                        <h1><a href="https://github.com/axiomalaska/ioos-sos-common" target="_blank">ioos-sos-common</a></h1>
                        <ul>
                            <li>Shared constants</li>
                            <li>Helper classes</li>
                        </ul>
                        <pre><code data-trim contenteditable>
platformTypeNode.setDefinition(IoosDefConstants.PLATFORM_TYPE_DEF);
                        
Point point = GeomHelper.createLatLngPoint(60.2, -140.1);
Point pointWithZ = GeomHelper.createLatLngPoint(60.2, -140.1, -10.3);
assertTrue(GeomHelper.equal2d(point, pointWithZ));
                        </code></pre>
                    </section>                    
                    
                    <section>
                        <h1><a href="https://github.com/axiomalaska/sos-injector" target="_blank">sos-injector</a></h1>
                        <ul>
                            <li>API for injecting observations into 52n IOOS SOS</li>
                            <li>See also: <a href="https://github.com/axiomalaska/sos-injector-example">sos-injector-example</a></li>
                        </ul>
                        <pre><code data-trim contenteditable>
PublisherInfo publisherInfo = new PublisherInfo();
publisherInfo.setCode("example");
publisherInfo.setName("Example publisher");
...
        
SosInjector sosInjector = new SosInjector("Example SOS Injector",
    sosUrl, authorizationToken, publisherInfo,
    new ExampleStationRetriever(),
    new ExampleObservationRetriever(), null );

sosInjector.update();    
                        </code></pre>
                    </section>                    
                    
                    <section>
                        <h1><a href="https://github.com/axiomalaska/sensor-web-harvester" target="_blank">sensor-web-harvester</a></h1>
                        <ul>
                            <li>Command line application</li>
                            <li>Harvests web available sensor data</li>
                            <li>Inserts to 52n IOOS SOS (using sos-injector)</li>
                            <li>Low setup overhead
                                <ul>
                                    <li>One small config file</li>
                                    <li>No database setup needed (uses H2)</li>
                                </ul>
                            </li>
                        </ul>
                    </section>                    

                    <section>
                        <h1><a href="https://github.com/axiomalaska/sensor-web-harvester" target="_blank">sensor-web-harvester</a></h1>
                        <h3>Many national sources out of the box</h3>
                        <div class="flexbox">
                            <ul>
                                <li>HADS</li>
                                <li>NDBC</li>
                                <li>CO-OPS</li>
                            </ul>
                            <ul>
                                <li>NOAA Weather</li>
                                <li>RAWS</li>
                                <li>SnoTel</li>
                            </ul>
                            <ul>
                                <li>USGS Water</li>
                                <li>NERRS</li>
                                <li>STORET</li>
                            </ul>
                        </div>
                    </section>                  
                    
                    <section>
                        <h1><a href="https://github.com/axiomalaska/ioos-sos-validator" target="_blank">ioos-sos-validator</a></h1>
                        <ul>
                            <li>Validation library for IOOS SOS servers/documents</li>
                            <li>Flexible
                                <ul>
                                    <li>Run during builds (jUnit suites)</li>
                                    <li>Run on command line
                                        <ul>
                                            <li>Against live SOS server</li>
                                            <li>Against static XML files</li>
                                            <li>Against IOOS templates on Google Code</li>
                                        </ul>
                                    </li>
                                    <li>TODO: webapp</li>
                                </ul>
                            </li>
                        </ul>
                    </section>                    
                </section>

                <section>
                    <h1>Next Steps</h1>
                    <ul>
                        <li>ioos-sos-validator
                            <ul>
                                <li>Add tests</li>
                                <li>Web interface</li>                                
                                <li>Write docs</li>
                             </ul>
                        </li>
                        <li>52n IOOS SOS
                            <ul>
                                <li>Export to NODC CF 1.6 netCDF (archive to ncSOS)</li>
                                <li>Implement quality flag support</li>
                            </ul>
                        </li>
                    </ul>
                </section>
                
                <section>
                    <h1>SOS 2.0</h1>
                    <ul>
                        <li>Spatial Filtering Profile (samplingGeometry)
                            <ul>
                                <li>All observations contain a samplingGeometry</li>
                                <li>Spatially filter observations on foi or samplingGeometry</li>
                                <li>Solves problem of how to handle mobile sensors</li>
                             </ul>
                        </li>
                    </ul>
                </section>

            </div>

        </div>

        <script src="bower_components/reveal.js/lib/js/head.min.js"></script>
        <script src="bower_components/reveal.js/js/reveal.min.js"></script>

        <script>

            // Full list of configuration options available here:
            // https://github.com/hakimel/reveal.js#configuration
            Reveal.initialize({
                controls: true,
                progress: true,
                history: true,
                center: true,

                theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
                transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

                // Optional libraries used to extend on reveal.js
                dependencies: [
                    { src: 'bower_components/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                    { src: 'bower_components/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: 'bower_components/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: 'bower_components/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                    { src: 'bower_components/reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
                    { src: 'bower_components/reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
                    { src: 'bower_components/jquery/jquery.min.js'},
                    { src: 'bower_components/springy/springy.js'},
                    { src: 'bower_components/springy/springyui.js'}
                ]
            });

      Reveal.addEventListener( 'ready', function( event ){
        var depGraph = new Springy.Graph();
        var depNodes = {
          n52_ioos_sos: depGraph.newNode({label: '52n-ioos-sos'}),
          ioos_sos_common: depGraph.newNode({label: 'ioos-sos-common'}),
          sensor_web_harvester: depGraph.newNode({label: 'sensor-web-harvester'}),
          sos_injector: depGraph.newNode({label: 'sos-injector'}),
          phenomena: depGraph.newNode({label: 'phenomena'}),
          cf4j: depGraph.newNode({label: 'cf4j'}),
          ioos_sos_validator: depGraph.newNode({label: 'ioos-sos-validator'})
        };

        depGraph.newEdge(depNodes.n52_ioos_sos, depNodes.ioos_sos_common, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.ioos_sos_common, depNodes.cf4j, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.n52_ioos_sos, depNodes.phenomena, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.n52_ioos_sos, depNodes.ioos_sos_validator, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.sensor_web_harvester, depNodes.sos_injector, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.sensor_web_harvester, depNodes.ioos_sos_common, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.sos_injector, depNodes.phenomena, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.sos_injector, depNodes.ioos_sos_common, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.phenomena, depNodes.cf4j, {color: '#FFFFFF'});
        depGraph.newEdge(depNodes.ioos_sos_validator, depNodes.ioos_sos_common, {color: '#FFFFFF'});

        $('#dep_graph_canvas').springy({ graph: depGraph });
      });
        </script>

    </body>
</html>
